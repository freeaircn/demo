注册功能：前端 & 后端

1 在框架的icon组件，加入新的SVG图标

2 模拟框架的icon组件，新增logo组件，插入svg图片。新加组件，是因为在icon组件样式设定了width属性，还不会怎么将样式属性也作为组件属性
  在webpack base config 中，增加下面的模块定义
  {
        test: /\.svg$/,
        loader: 'svg-sprite-loader',
        include: [resolve('src/logos')],
        options: {
          symbolId: 'logo-[name]'
        }
      },

3 按Element UI的色彩，调整页面样式的颜色
  $bg:#ffffff;
  $light_gray:#eee;
  $dark_gray:#606266;
  $border_gray: #DCDFE6;

  去掉container的Position: fixed属性（窗口大小变化滚动条无效）
  去掉form的Position: absolute属性（使元素的位置与文档流无关，定位的元素和其他元素重叠）

4 注册页面表单验证：
  “change”事件触发校验；
  使用回调方式，使用字符串的正则表达式校验；
  change与blur差别：用户没有输入任何内容，而输入框失去焦点，页面不会出现校验提示。
  password: [{ required: true, trigger: 'change', validator: validatePssword }]
  const pwdReg = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^]{8,16}$/
    const validatePssword = (rule, value, callback) => {
      if (value === '') {
        callback(new Error('请输入密码'))
      } else if (!pwdReg.test(value)) {
        callback(new Error('密码最小长度为8位，必须包含大写、小写字母、数字！'))
      } else {
        if (this.form1.confirmPassword !== '') {
          this.$refs.form1.validateField('confirmPassword')
        }
        callback()
      }
    }

5 功能需求：鼠标离开手机号/邮箱表单项，满足校验条件后，将手机号/邮箱发送给后端，检查该是否已被注册。
  方法：使用@blur事件：
  <el-input v-model="form1.userphone" name="userphone" type="text" placeholder="手机号" clearable @blur="checkInfo('phone')" />

  回调：回调函数传入参数，区分检查手机号，或邮箱地址
    checkInfo(infoItem) {
      switch (infoItem) {
        case 'phone':

  vue使用ref访问子组件，即给form-item定义ref=xxx，通过this.$refs.xxx或this.$refs['xxx']访问子组件
  this.$refs.xxx.method()

6 后端：用户信息数据库表
  2019-03-06 数据库表使用开源包中的表，后续根据实际需要调整。
  不同数据表怎么关联信息

7 注册页面第一步提交，后端验证通过，完成登记，后端发送激活邮件
  2019-03-09
  后端：register方法中调用deactivate()，检查了当前用户是否已登录。TODO: 待确认影响。
  激活结果页面：激活成功，给出链接至"登录页面"。重复激活提示。

